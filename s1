dotnet add package MassTransit
dotnet add package MassTransit.Azure.ServiceBus.Core
dotnet add package MassTransit.RabbitMQ

public class MessagingConfiguration
{
    public string Transport { get; set; } // "AzureServiceBus" or "RabbitMQ"
    public string ConnectionString { get; set; }
}
public interface IMessagingWrapper
{
    Task SendMessageAsync<T>(T message, string queueName) where T : class;
}
using MassTransit;
using MassTransit.Azure.ServiceBus.Core;
using MassTransit.RabbitMqTransport;
using System.Threading.Tasks;

public class MessagingWrapper : IMessagingWrapper
{
    private readonly IBusControl _busControl;

    public MessagingWrapper(MessagingConfiguration config)
    {
        _busControl = ConfigureBus(config);
        _busControl.StartAsync().Wait();
    }

    private IBusControl ConfigureBus(MessagingConfiguration config)
    {
        return config.Transport switch
        {
            "AzureServiceBus" => Bus.Factory.CreateUsingAzureServiceBus(bus =>
            {
                bus.Host(config.ConnectionString);
            }),
            "RabbitMQ" => Bus.Factory.CreateUsingRabbitMq(bus =>
            {
                bus.Host(config.ConnectionString);
            }),
            _ => throw new ArgumentException("Invalid transport type")
        };
    }

    public async Task SendMessageAsync<T>(T message, string queueName) where T : class
    {
        var sendEndpoint = await _busControl.GetSendEndpoint(new Uri($"queue:{queueName}"));
        await sendEndpoint.Send(message);
    }
}
dotnet new console -n MessagingWrapperTest
cd MessagingWrapperTest
dotnet add reference ../MessagingWrapper/MessagingWrapper.csproj

using System;
using System.Threading.Tasks;
using MessagingWrapper;

class Program
{
    static async Task Main(string[] args)
    {
        var config = new MessagingConfiguration
        {
            Transport = "RabbitMQ", // or "AzureServiceBus"
            ConnectionString = "your-connection-string"
        };

        IMessagingWrapper messagingWrapper = new MessagingWrapper.MessagingWrapper(config);

        var message = new { Text = "Hello, World!" };

        await messagingWrapper.SendMessageAsync(message, "test-queue");

        Console.WriteLine("Message sent.");
    }
}

