dotnet new classlib -n OrderToTeamsLibrary
cd OrderToTeamsLibrary


dotnet add package MassTransit
dotnet add package MassTransit.RabbitMQ
dotnet add package Microsoft.Extensions.Http
dotnet add package Newtonsoft.Json


// Models/Order.cs
namespace OrderToTeamsLibrary.Models
{
    public class Order
    {
        public int Id { get; set; }
        public string CustomerName { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}


// Consumers/OrderConsumer.cs
using MassTransit;
using OrderToTeamsLibrary.Models;
using OrderToTeamsLibrary.Services;
using System.Threading.Tasks;

namespace OrderToTeamsLibrary.Consumers
{
    public class OrderConsumer : IConsumer<Order>
    {
        private readonly TeamsService _teamsService;

        public OrderConsumer(TeamsService teamsService)
        {
            _teamsService = teamsService;
        }

        public async Task Consume(ConsumeContext<Order> context)
        {
            var order = context.Message;
            await _teamsService.SendOrderToTeams(order);
        }
    }
}



// Services/TeamsService.cs
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using OrderToTeamsLibrary.Models;

namespace OrderToTeamsLibrary.Services
{
    public class TeamsService
    {
        private readonly HttpClient _httpClient;
        private readonly string _webhookUrl;

        public TeamsService(HttpClient httpClient, string webhookUrl)
        {
            _httpClient = httpClient;
            _webhookUrl = webhookUrl;
        }

        public async Task SendOrderToTeams(Order order)
        {
            var teamsMessage = new
            {
                text = $"New Order Received:\nCustomer: {order.CustomerName}\nProduct: {order.ProductName}\nQuantity: {order.Quantity}\nPrice: {order.Price:C}"
            };
            var jsonMessage = JsonConvert.SerializeObject(teamsMessage);
            var content = new StringContent(jsonMessage, Encoding.UTF8, "application/json");

            await _httpClient.PostAsync(_webhookUrl, content);
        }
    }
}


// Program.cs
using MassTransit;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using OrderToTeamsLibrary.Consumers;
using OrderToTeamsLibrary.Services;

class Program
{
    static async Task Main(string[] args)
    {
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices((context, services) =>
            {
                services.AddHttpClient<TeamsService>(client =>
                {
                    client.BaseAddress = new Uri("https://outlook.office.com/");
                });
                services.AddSingleton(sp => new TeamsService(sp.GetRequiredService<HttpClient>(), "YOUR_TEAMS_WEBHOOK_URL"));

                services.AddMassTransit(x =>
                {
                    x.AddConsumer<OrderConsumer>();
                    x.UsingRabbitMq((context, cfg) =>
                    {
                        cfg.Host("localhost", "/", h => { });
                        cfg.ReceiveEndpoint("order_queue", e =>
                        {
                            e.ConfigureConsumer<OrderConsumer>(context);
                        });
                    });
                });
                services.AddMassTransitHostedService();
            })
            .Build();

        await host.RunAsync();
    }
}


// Services/OrderPublisher.cs
using MassTransit;
using OrderToTeamsLibrary.Models;
using System.Threading.Tasks;

namespace OrderToTeamsLibrary.Services
{
    public class OrderPublisher
    {
        private readonly IPublishEndpoint _publishEndpoint;

        public OrderPublisher(IPublishEndpoint publishEndpoint)
        {
            _publishEndpoint = publishEndpoint;
        }

        public async Task PublishOrder(Order order)
        {
            await _publishEndpoint.Publish(order);
        }
    }
}



// Program.cs
using MassTransit;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using OrderToTeamsLibrary.Consumers;
using OrderToTeamsLibrary.Models;
using OrderToTeamsLibrary.Services;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices((context, services) =>
            {
                services.AddHttpClient<TeamsService>(client =>
                {
                    client.BaseAddress = new Uri("https://outlook.office.com/");
                });
                services.AddSingleton(sp => new TeamsService(sp.GetRequiredService<HttpClient>(), "YOUR_TEAMS_WEBHOOK_URL"));

                services.AddMassTransit(x =>
                {
                    x.AddConsumer<OrderConsumer>();
                    x.UsingRabbitMq((context, cfg) =>
                    {
                        cfg.Host("localhost", "/", h => { });
                        cfg.ReceiveEndpoint("order_queue", e =>
                        {
                            e.ConfigureConsumer<OrderConsumer>(context);
                        });
                    });
                });
                services.AddMassTransitHostedService();
                services.AddSingleton<OrderPublisher>();
            })
            .Build();

        var orderPublisher = host.Services.GetRequiredService<OrderPublisher>();
        await orderPublisher.PublishOrder(new Order
        {
            Id = 1,
            CustomerName = "John Doe",
            ProductName = "Sample Product",
            Quantity = 1,
            Price = 9.99m
        });

        await host.RunAsync();
    }
}


