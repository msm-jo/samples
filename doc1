Using MassTransit as an abstraction layer for both Azure Service Bus in production and RabbitMQ in development can streamline your messaging system by providing a consistent API and set of features across different messaging platforms. Here’s a detailed look at the pros and cons of this setup:

### Pros:

#### MassTransit Abstraction

1. **Unified API:**
   - Provides a consistent API for working with different messaging systems, reducing the learning curve and simplifying development.
   - Developers can write code once and use it across different environments without significant changes.

2. **Flexibility:**
   - Allows you to switch between different messaging systems with minimal code changes.
   - Supports multiple transports, including Azure Service Bus and RabbitMQ, making it easier to adapt to different environments and requirements.

3. **Rich Feature Set:**
   - Offers advanced features such as message retry policies, circuit breakers, sagas for long-running transactions, and support for various messaging patterns.
   - Integrates well with .NET applications, enhancing productivity and maintainability.

4. **Testing:**
   - Facilitates easier testing and debugging by using the same codebase across development and production environments.
   - Simplifies mocking and unit testing of messaging components.

#### Azure Service Bus (Production)

1. **Scalability and Reliability:**
   - MassTransit leverages the scalability and reliability features of Azure Service Bus, ensuring high availability and fault tolerance in production.
   - Automatic message handling features like retries and dead-lettering are supported.

2. **Security and Compliance:**
   - Takes advantage of Azure’s robust security features, ensuring secure message transmission and compliance with industry standards.

#### RabbitMQ (Development)

1. **Cost-Effective Development:**
   - Reduces costs during the development phase by using an open-source messaging system.
   - Quick and easy to set up for local development and testing.

2. **Local Development:**
   - Enables rapid development and testing on local machines without requiring cloud resources.
   - Provides a lightweight environment suitable for development and integration testing.

### Cons:

#### Potential Issues with Abstraction

1. **Feature Discrepancies:**
   - There might be differences in features and capabilities between Azure Service Bus and RabbitMQ that MassTransit abstracts. Certain features specific to one transport might not be available or behave differently.
   - While MassTransit provides a consistent API, underlying transport-specific configurations and behaviors need careful management to avoid issues.

2. **Performance Overhead:**
   - Abstraction layers can introduce some performance overhead. Although MassTransit is optimized, it might add slight latency compared to using the messaging systems directly.

3. **Configuration Management:**
   - Requires careful management of configuration settings for different environments to ensure consistent behavior.
   - Potential complexities in ensuring that the MassTransit configurations are appropriately tuned for both RabbitMQ in development and Azure Service Bus in production.

4. **Learning Curve:**
   - While MassTransit simplifies many aspects, there is still a learning curve associated with understanding its features and how to best configure it for different transports.

### Conclusion

Using MassTransit with Azure Service Bus for production and RabbitMQ for development can provide a streamlined, consistent, and flexible messaging solution. The unified API and feature set of MassTransit simplify development and testing, while leveraging the strengths of both messaging systems for their respective environments. However, it's crucial to carefully manage configuration and be aware of potential discrepancies between the two messaging systems to ensure smooth operation and transitions between development and production. 

Proper testing, monitoring, and documentation will help mitigate issues and fully leverage the benefits of this approach.