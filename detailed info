If you decide to use RabbitMQ for development and Azure Service Bus for production through MassTransit, you can maintain a consistent messaging interface across both environments. However, there are specific features and capabilities unique to each messaging platform that you might not fully utilize or may need to handle differently. Here’s a breakdown of potential features you might miss or need to adapt to:

### RabbitMQ Specific Features You Might Miss:
1. **Advanced Plugin Ecosystem**:
   - **Shovel and Federation Plugins**: These plugins allow for advanced message routing and linking multiple RabbitMQ brokers, which might not have direct equivalents in Azure Service Bus.
   - **Management Plugin**: Detailed monitoring and management features through the RabbitMQ Management UI may not be directly accessible.

2. **Custom Exchange Types**: 
   - RabbitMQ’s various exchange types (direct, topic, fanout, headers) allow for flexible routing mechanisms that might need specific configurations which are abstracted by MassTransit.

3. **AMQP Protocol Specific Features**:
   - Fine-grained control over AMQP features and behaviors that are specific to RabbitMQ might be less accessible when using MassTransit.

4. **Performance Tuning**:
   - Direct configurations for optimizing RabbitMQ’s performance and tuning based on specific workloads and scenarios might be abstracted away.

### Azure Service Bus Specific Features You Might Miss:
1. **Message Sessions**:
   - For implementing FIFO patterns and session-based processing, this advanced feature of Azure Service Bus might not be fully leveraged through MassTransit.

2. **Auto Forwarding**:
   - Automatically forwarding messages from one queue to another within Azure Service Bus is a unique feature that may require custom handling.

3. **Geo-Disaster Recovery**:
   - Native support for geo-disaster recovery and failover capabilities specific to Azure Service Bus might not be fully utilized.

4. **Large Messages**:
   - Support for messages up to 100 MB in the premium tier might not be directly managed by MassTransit.

5. **Advanced Networking**:
   - Virtual Network (VNet) integration and other advanced networking features might not be fully leveraged.

6. **Built-in Dead-Lettering**:
   - Azure Service Bus’s built-in dead-lettering and message lifecycle management features might require additional configurations to use effectively.

### General Considerations:
1. **Latency and Performance**:
   - Specific performance characteristics and latency optimizations unique to each broker may not be fully controllable through MassTransit.

2. **Monitoring and Diagnostics**:
   - Broker-specific monitoring tools and diagnostics might not provide as much detail through the abstraction layer of MassTransit.

3. **Error Handling and Retry Policies**:
   - Custom error handling and retry policies specific to each broker might require different configurations.

### Conclusion:
Using MassTransit provides a powerful abstraction that simplifies integrating RabbitMQ and Azure Service Bus, ensuring a unified API and easier management. However, you might need to handle some advanced features and optimizations differently. Understanding the limitations and capabilities of each messaging platform and how they integrate with MassTransit is crucial to ensure you can leverage the strengths of both RabbitMQ and Azure Service Bus effectively in their respective environments.

For more detailed information, you might find the following resources helpful:
- [RabbitMQ Features and Plugins](https://www.rabbitmq.com/plugins.html)
- [Azure Service Bus Capabilities](https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview)
- [MassTransit Documentation](https://masstransit-project.com/usage/index.html)