// IMessageProcessor.cs
public interface IMessageProcessor
{
    Task ProcessOrderAsync(Order order);
    Task<OrderResponse> HandleOrderRequestAsync(OrderRequest request);
}

// IMessagePublisher.cs
public interface IMessagePublisher
{
    Task PublishOrderAsync(Order order);
}


// Services/MessageProcessor.cs
public class MessageProcessor : IMessageProcessor
{
    private readonly TeamsService _teamsService;

    public MessageProcessor(TeamsService teamsService)
    {
        _teamsService = teamsService;
    }

    public async Task ProcessOrderAsync(Order order)
    {
        // Send request and await response
        var response = await _teamsService.SendOrderToTeams(order);
        // Handle the response (Accepted/Rejected) accordingly
        await _teamsService.HandleOrderResponse(response);
    }

    public async Task<OrderResponse> HandleOrderRequestAsync(OrderRequest request)
    {
        // Mocked order response for demonstration. Fetch from DB or other service in real scenarios.
        return new OrderResponse
        {
            OrderId = request.OrderId,
            CustomerName = "John Doe",
            ProductName = "Sample Product",
            Quantity = 1,
            Price = 9.99m
        };
    }
}

// Services/MessagePublisher.cs
public class MessagePublisher : IMessagePublisher
{
    private readonly IPublishEndpoint _publishEndpoint;

    public MessagePublisher(IPublishEndpoint publishEndpoint)
    {
        _publishEndpoint = publishEndpoint;
    }

    public async Task PublishOrderAsync(Order order)
    {
        await _publishEndpoint.Publish(order);
    }
}


// Consumers/OrderConsumer.cs
public class OrderConsumer : IConsumer<Order>
{
    private readonly IMessageProcessor _messageProcessor;

    public OrderConsumer(IMessageProcessor messageProcessor)
    {
        _messageProcessor = messageProcessor;
    }

    public async Task Consume(ConsumeContext<Order> context)
    {
        await _messageProcessor.ProcessOrderAsync(context.Message);
    }
}

// Consumers/OrderRequestConsumer.cs
public class OrderRequestConsumer : IConsumer<OrderRequest>
{
    private readonly IMessageProcessor _messageProcessor;

    public OrderRequestConsumer(IMessageProcessor messageProcessor)
    {
        _messageProcessor = messageProcessor;
    }

    public async Task Consume(ConsumeContext<OrderRequest> context)
    {
        var response = await _messageProcessor.HandleOrderRequestAsync(context.Message);
        await context.RespondAsync(response);
    }
}


// Program.cs
using MassTransit;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using OrderToTeamsLibrary.Consumers;
using OrderToTeamsLibrary.Services;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddHttpClient<TeamsService>(client =>
{
    client.BaseAddress = new Uri("https://outlook.office.com/");
});
builder.Services.AddSingleton<TeamsService>();
builder.Services.AddSingleton<IMessageProcessor, MessageProcessor>();
builder.Services.AddSingleton<IMessagePublisher, MessagePublisher>();

// Configure MassTransit
builder.Services.AddMassTransit(x =>
{
    // Add consumers
    x.AddConsumer<OrderConsumer>();
    x.AddConsumer<OrderRequestConsumer>();

    // Configure RabbitMQ
    x.UsingRabbitMq((context, cfg) =>
    {
        cfg.Host("localhost", "/", h => { });

        cfg.ReceiveEndpoint("order_queue_rabbitmq", e =>
        {
            e.ConfigureConsumer<OrderConsumer>(context);
        });

        cfg.ReceiveEndpoint("order_request_queue_rabbitmq", e =>
        {
            e.ConfigureConsumer<OrderRequestConsumer>(context);
        });
    });

    // Configure Azure Service Bus
    x.UsingAzureServiceBus((context, cfg) =>
    {
        cfg.Host("YOUR_AZURE_SERVICE_BUS_CONNECTION_STRING");

        cfg.ReceiveEndpoint("order_queue_servicebus", e =>
        {
            e.ConfigureConsumer<OrderConsumer>(context);
        });

        cfg.ReceiveEndpoint("order_request_queue_servicebus", e =>
        {
            e.ConfigureConsumer<OrderRequestConsumer>(context);
        });
    });
});

builder.Services.AddMassTransitHostedService();

var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

// Services/TeamsService.cs
public class TeamsService
{
    private readonly HttpClient _httpClient;
    private readonly string _webhookUrl;

    public TeamsService(HttpClient httpClient, string webhookUrl)
    {
        _httpClient = httpClient;
        _webhookUrl = webhookUrl;
    }

    public async Task<OrderResponseMessage> SendOrderToTeams(Order order)
    {
        var teamsMessage = new
        {
            text = $"New Order Received:\nCustomer: {order.CustomerName}\nProduct: {order.ProductName}\nQuantity: {order.Quantity}\nPrice: {order.Price:C}",
            actions = new[]
            {
                new
                {
                    type = "ActionCard",
                    name = "Respond to Order",
                    actions = new[]
                    {
                        new
                        {
                            type = "HttpPOST",
                            name = "Accept",
                            target = $"{_webhookUrl}/api/orders/respond",
                            body = JsonConvert.SerializeObject(new OrderResponseMessage { OrderId = order.Id, Accepted = true, Response = "Accepted" })
                        },
                        new
                        {
                            type = "HttpPOST",
                            name = "Reject",
                            target = $"{_webhookUrl}/api/orders/respond",
                            body = JsonConvert.SerializeObject(new OrderResponseMessage { OrderId = order.Id, Accepted = false, Response = "Rejected" })
                        }
                    }
                }
            }
        };

        var jsonMessage = JsonConvert.SerializeObject(teamsMessage);
        var content = new StringContent(jsonMessage, Encoding.UTF8, "application/json");

        var response = await _httpClient.PostAsync(_webhookUrl, content);
        response.EnsureSuccessStatusCode();

        // Simulate receiving a response from Teams
        return new OrderResponseMessage { OrderId = order.Id, Accepted = true, Response = "Accepted" };
    }

    public async Task HandleOrderResponse(OrderResponseMessage response)
    {
        // Handle the response logic here
        if (response.Accepted)
        {
            Console.WriteLine($"Order {response.OrderId} was accepted with response: {response.Response}");
        }
        else
        {
            Console.WriteLine($"Order {response.OrderId} was rejected with response: {response.Response}");
        }

        await Task.CompletedTask;
    }
}
