public class MessagePublisher
{
    private readonly IBus _bus;
    private readonly ILogger<MessagePublisher> _logger;
    private readonly MessagingConfig _config;

    public MessagePublisher(IBus bus, ILogger<MessagePublisher> logger, MessagingConfig config)
    {
        _bus = bus;
        _logger = logger;
        _config = config;
    }

    public async Task<ResponseMessage<YourResponseType>> SendRequestAsync(YourRequestType requestPayload)
    {
        try
        {
            var requestMessage = new RequestMessage<YourRequestType>
            {
                Payload = requestPayload,
                CorrelationId = Guid.NewGuid()
            };

            var requestClient = _bus.CreateRequestClient<RequestMessage<YourRequestType>>(new Uri($"queue:{_config.RequestQueue}"));
            var response = await requestClient.GetResponse<ResponseMessage<YourResponseType>>(requestMessage);
            return response.Message;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error occurred while sending request message.");
            throw;
        }
    }
}